name: Node.js CD

on:
  workflow_dispatch:  # Allow manual triggering
  push:
    branches:
      - main

# Enforce best practices
# env:
#   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}  # Reference secret for access key
#   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_ }} 

jobs:
  test:  # Job for running tests
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./starter/frontend
    strategy:
      matrix:
        node-version: ['16.x', '18.x']
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: './starter/frontend/package-lock.json'
    - name: Install dependencies
      run: npm ci
    - name: Run tests
      run: npm run test

  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./starter/frontend
    steps:
    - uses: actions/checkout@v4
    - name: Build Docker image with environment variable
      run: docker build -t <your_image_name> --build-arg REACT_APP_MOVIE_API_URL=<api_url> .

  # ecr-login:  # Login to ECR with Github Secrets for credentials
  #   runs-on: ubuntu-latest
  #   needs: build  # Wait for build job to complete
  #   steps:
  #     - name: Login to Amazon ECR
  #       uses: aws-actions/amazon-ecr-login@v2
  #       with:
  #         region: <aws_region>  # Replace with your AWS region
  #         secret: ECR_LOGIN  # Reference a secret containing credentials

  # push-to-ecr:  # Push Docker image to ECR
  #   runs-on: ubuntu-latest
  #   needs: ecr-login  # Wait for ECR login job to complete
  #   steps:
  #     - uses: aws-actions/amazon-ecr-push@v2
  #       with:
  #         registry: <ecr_registry_id>.dkr.ecr.<aws_region>.amazonaws.com  # Replace with your ECR registry details
  #         repository: <image_name>  # Replace with your image name
  #         image: <image_digest>  # Automatically populated by Docker build

  # deploy:  # Deploy application using kubectl
  #   runs-on: ubuntu-latest
  #   needs: push-to-ecr  # Wait for ECR push job to complete
  #   steps:
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         region: <aws_region>  # Replace with your AWS region
  #     - name: Deploy to EKS cluster
  #       run: kubectl apply -f <deployment.yaml>  # Replace with your deployment manifest
